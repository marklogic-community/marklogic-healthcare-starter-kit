buildscript {
  repositories {
    mavenLocal()
    maven {url 'http://developer.marklogic.com/maven2/'}
    jcenter()
  }

  dependencies {
    classpath "com.marklogic:ml-data-hub:5.5.1"
    classpath "com.marklogic:marklogic-unit-test-client:1.1.0"
  }
}

plugins {
  id 'java'
  id 'eclipse'
  id 'idea'

  // Gradle Properties plugin
  id 'net.saliman.properties' version '1.4.6'

  // Data Hub plugin
  id 'com.marklogic.ml-data-hub' version '5.5.1'

  //Data services needs these
  id 'com.marklogic.ml-development-tools' version '5.4.0'
}

repositories {
  maven {url "https://plugins.gradle.org/m2/"}
  mavenCentral()
  jcenter()
  maven {url 'http://developer.marklogic.com/maven2/'}
  if (project.hasProperty("testing")) {
    mavenLocal()
  }
}

configurations {
  mlcp
}

dependencies {
  mlcp "com.marklogic:mlcp:10.0.6.2"
  mlcp files("lib")
}

dependencies {
  // Ensures that the marklogic-unit-test modules are loaded into the modules database when the application is deployed
  mlBundle "com.marklogic:marklogic-unit-test-modules:1.0.0"

  testImplementation "com.marklogic:marklogic-data-hub-junit5:5.5.1"

  // Adds logging support for tests
  testImplementation "ch.qos.logback:logback-classic:1.2.3"

  mlcp "com.marklogic:mlcp:10.0.6.2"
  mlcp files("lib")

  implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-base', version: '5.3.3'
  implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-r4', version: '5.3.3'
}

test {
  useJUnitPlatform()
}

task resetDBs(type: com.marklogic.gradle.task.ServerEvalTask) {
  javascript = 'xdmp.invoke("/envision/system/resetSystem.sjs")'
}

task loadReferenceDataStaging(type: com.marklogic.gradle.task.MlcpTask) {
  doFirst {
    database = mlStagingDbName
    port = mlStagingPort.toInteger()
  }
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
    "-input_file_path", "$project.projectDir/src/main/ml-data/referenceData/ValueSets",
    "-output_collections", "referenceData",
    "-output_permissions", "rest-reader,read,rest-writer,update",
    "-document_type", "json",
    "-output_uri_replace", ".*src/main/ml-data,''",
    "-modules_root", "/",
  ]
}

mlLoadData.dependsOn loadReferenceDataStaging

ext.getOntologyLoadArgs = { ttlFile, outputGraph ->
  assert (!ttlFile.equals(''))
  assert ttlFile.endsWith('.ttl')
  assert file(ttlFile).exists()
  assert (!outputGraph.equals(''))

  return [
    '-input_file_path', ttlFile,
    '-output_graph', outputGraph,
    '-input_file_type', 'rdf'
  ]
}

task loadIcd10PcsOntology(type: com.marklogic.gradle.task.MlcpTask) {
  doFirst {
    database = mlFinalDbName
    port = mlFinalPort.toInteger()
  }
  classpath = configurations.mlcp
  command = 'IMPORT'
  args = getOntologyLoadArgs("$project.projectDir/src/main/ml-data/ontologies/ICD10PCS.ttl", 'icd-10-pcs-ontology')
}

task loadIcd10CmOntology(type: com.marklogic.gradle.task.MlcpTask) {
  doFirst {
    database = mlFinalDbName
    port = mlFinalPort.toInteger()
  }
  classpath = configurations.mlcp
  command = 'IMPORT'
  args = getOntologyLoadArgs("$project.projectDir/src/main/ml-data/ontologies/ICD10CM.ttl", 'icd-10-cm-ontology')
}

task loadIcd10Ontologies {
  dependsOn loadIcd10PcsOntology
  dependsOn loadIcd10CmOntology
}

task loadSnomedCTOntology(type: com.marklogic.gradle.task.MlcpTask) {
  doFirst {
    database = mlFinalDbName
    port = mlFinalPort.toInteger()
  }
  classpath = configurations.mlcp
  command = 'IMPORT'
  args = getOntologyLoadArgs("$project.projectDir/src/main/ml-data/ontologies/SNOMED-CT.ttl", 'snomed-ct-ontology')
}

task loadOntologies {
  dependsOn loadIcd10Ontologies
  dependsOn loadSnomedCTOntology
}
