buildscript {
  repositories {
    mavenLocal()
    maven {url 'http://developer.marklogic.com/maven2/'}
    jcenter()
  }
  dependencies {
       classpath "com.marklogic:ml-data-hub:5.5.1"
       classpath "com.marklogic:marklogic-unit-test-client:1.1.0"

  }
}

plugins {
  id 'java'
  id 'eclipse'
  id 'idea'
  
    // Gradle Properties plugin
    id 'net.saliman.properties' version '1.4.6'

    // Data Hub plugin
    id 'com.marklogic.ml-data-hub' version '5.5.1'

  //Data services needs these
  id 'com.marklogic.ml-development-tools' version '5.4.0'
}

repositories {
  maven {url "https://plugins.gradle.org/m2/"}
  mavenCentral()
  jcenter()
  maven {url 'http://developer.marklogic.com/maven2/'}
  if (project.hasProperty("testing")) {
      mavenLocal()
  }
}

configurations {
  mlcp
}

dependencies {
  mlcp "com.marklogic:mlcp:10.0.6.2"
  mlcp files("lib")
}

dependencies {
    // Ensures that the marklogic-unit-test modules are loaded into the modules database when the application is deployed
    mlBundle "com.marklogic:marklogic-unit-test-modules:1.0.0"
    
    testImplementation "com.marklogic:marklogic-data-hub-junit5:5.5.1"
    
    // Adds logging support for tests
    testImplementation "ch.qos.logback:logback-classic:1.2.3"
    
    mlcp "com.marklogic:mlcp:10.0.6.2"
    mlcp files("lib")

    implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-base', version: '5.3.3'
    implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-r4', version: '5.3.3'
}

test {
    useJUnitPlatform()
}

task resetDBs(type: com.marklogic.gradle.task.ServerEvalTask) {
  javascript = 'xdmp.invoke("/envision/system/resetSystem.sjs")'
}

task loadReferenceDataStaging(type: com.marklogic.gradle.task.MlcpTask) {
  doFirst {
    database = mlStagingDbName
    port = mlStagingPort.toInteger()
  }
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/src/main/ml-data/referenceData/ValueSets",
      "-output_collections", "referenceData",
      "-output_permissions", "rest-reader,read,rest-writer,update",
      "-document_type", "json",
      "-output_uri_replace", ".*src/main/ml-data,''",
      "-modules_root", "/",
  ]
}

task loadMetaDataStaging(type: com.marklogic.gradle.task.MlcpTask) {
  doFirst {
    database = mlStagingDbName
    port = mlStagingPort.toInteger()
  }
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/src/main/ml-data/meta",
      "-output_collections", "metaData",
      "-output_permissions", "raw-data-reader,read,mes-writer,update",
      "-document_type", "json",
      "-output_uri_replace", ".*src/main/ml-data,''",
      "-modules_root", "/",
  ]
}

task loadMetaDataFinal(type: com.marklogic.gradle.task.MlcpTask) {
  doFirst {
    database = mlFinalDbName
    port = mlFinalPort.toInteger()
  }
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/src/main/ml-data/meta",
      "-output_collections", "metaData",
      "-output_permissions", "raw-data-reader,read,mes-writer,update",
      "-document_type", "json",
      "-output_uri_replace", ".*src/main/ml-data,''",
      "-modules_root", "/",
  ]
}

mlLoadData.dependsOn loadReferenceDataStaging
mlLoadData.dependsOn loadMetaDataStaging
mlLoadData.dependsOn loadMetaDataFinal

task ingestClaims (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest claims raw data"
    flowName = "Claim"
    steps = ["1"]
    inputFilePath="data/synthea/csv/claims/"
    inputFileType="csv"
}

task ingestClaimsSmaller (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest smaller claims raw data"
    flowName = "Claim"
    steps = ["1"]
    inputFilePath="data/synthea/csv/claims-smaller/"
    inputFileType="csv"
}

task ingestClaimLines(type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest claim transactions raw data"
    flowName = "ClaimTransaction"
    steps = ["1"]
    inputFilePath="data/synthea/csv/claims_transactions/"
    inputFileType="csv"
}

task ingestClaimLinesSmaller(type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest smaller claim transactions raw data"
    flowName = "ClaimTransaction"
    steps = ["1"]
    inputFilePath="data/synthea/csv/claims_transactions-smaller/"
    inputFileType="csv"
}

task ingestPatients (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest patient/member raw data"
    flowName = "Patient"
    steps = ["1"]
    inputFilePath="data/synthea/csv/patients/"
    inputFileType="csv"
}

task ingestProviders (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest provider raw data"
    flowName = "Provider"
    steps = ["1"]
    inputFilePath="data/synthea/csv/providers/"
    inputFileType="csv"
}

task ingestOrganizations (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest organization raw data"
    flowName = "Organization"
    steps = ["1"]
    inputFilePath="data/synthea/csv/organizations/"
    inputFileType="csv"
}


task ingestPayers (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Ingest payer raw data"
    flowName = "Payor"
    steps = ["1"]
    inputFilePath="data/synthea/csv/payers/"
    inputFileType="csv"
}

task ingest {
  dependsOn ingestClaims
  dependsOn ingestClaimLines
  dependsOn ingestPatients
  dependsOn ingestProviders
  dependsOn ingestOrganizations
  dependsOn ingestPayers
}

task ingestSmaller {
  dependsOn ingestClaimsSmaller
  dependsOn ingestClaimLinesSmaller
  dependsOn ingestPatients
  dependsOn ingestProviders
  dependsOn ingestOrganizations
  dependsOn ingestPayers
}


task harmonizePatients (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Harmonize patient data"
    flowName = "Patient"
    steps = ["2","3","4","5"]
}
task harmonizeOrganizations (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Harmonize organization data"
    flowName = "Organization"
    steps = ["2","3"]
}
task harmonizeProviders (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Harmonize provider data"
    flowName = "Provider"
    steps = ["2","3","4"]
}
task harmonizeClaims (type: com.marklogic.gradle.task.RunFlowTask) {
    description = "Harmonize claim data"
    flowName = "Claim"
    steps = ["2"]
}

task harmonizeAll {
  dependsOn harmonizePatients
  dependsOn harmonizeOrganizations
  dependsOn harmonizeProviders
  dependsOn harmonizeClaims
}
